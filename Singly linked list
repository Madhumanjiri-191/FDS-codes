#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *next;
};
struct node *head, *newnode, *temp, *prevnode;
void main()
{
    int choice, element, ch;
    head = NULL;
    do
    {
        printf("1.Insert at first\n2.Insert at last\n3.Insert at position\n4.Delete at first\n5.Delete at last\n6.Delete at position\n7.Count\n8.Search\n9.Display\n10.Exit\n");
        printf("Enter your choice\n");
        scanf("%d", &ch);
        switch (ch)
        {
        case 1://INSERT AT FIRST
        {
            newnode = malloc(sizeof(struct node));
            if (newnode == NULL)
            {
                printf("Memory allocation failed\n");
                break;
            }

            printf("Enter the data for new node: ");
            scanf("%d", &newnode->data);

            newnode->next = head; 
            head = newnode;
        }
        break;
        case 2://INSERT AT LAST
        {
            newnode = malloc(sizeof(struct node));

            if (head == NULL)
            {

                head = newnode;
                printf("There is no node present, so the node you made is the last node\n");
                newnode = malloc(sizeof(struct node));

                temp = newnode;
                printf("Enter the data for the newnode:");
                scanf("%d", &newnode->data);
            }
            else
            {
                temp = head;
                while (temp->next != NULL)
                {

                    temp = temp->next;
                }
                newnode = malloc(sizeof(struct node));
                printf("Enter the data for the newnode:");
                scanf("%d", &newnode->data);
                newnode->next = NULL;
                temp->next = newnode;
            }
        }
        break;
        case 3: //INSERT AT POSITION
        {
                int pos, i = 1;
                newnode = malloc(sizeof(struct node));  
                if (newnode == NULL) {
                    printf("Memory allocation failed\n");
                    break;
                }

                printf("Enter the position you want to insert: ");
                scanf("%d", &pos);
                printf("Enter the data for new node: ");
                scanf("%d", &newnode->data);
                newnode->next = NULL;

                if (pos == 1) {
                    
                    newnode->next = head;
                    head = newnode;
                } else {
                    
                    temp = head;
                    while (temp != NULL && i < pos - 1) {
                        temp = temp->next;
                        i++;
                    }

                    if (temp == NULL) {
                        printf("Position out of bounds.\n");
                        free(newnode);  
                    } else {
                       
                        newnode->next = temp->next;
                        temp->next = newnode;
                    }
                }
                break;
            }


        case 4://DELETE AT FIRST
        {

            if (head == NULL)
            {
                printf("Empty linked list\n");
            }
            else
            {
                temp = head;
                printf("Deleted element: %d\n", temp->data);
                head = head->next;

                free(temp);
            }
        }
        break;
        case 5://DELETE AT LAST
        {

            if (head == NULL)
            {
                printf("Empty linked list\n");
            }
            else
            {
                temp = head;
                while (temp->next != NULL)
                {
                    prevnode = temp;
                    temp = temp->next;
                }
                prevnode->next = NULL;
                printf("Deleted element: %d\n", temp->data);
                free(temp);
            }
        }
        break;
        
        case 6://DELETE AT POISITION
{
    int pos, i = 1;
    printf("Enter the position to delete: ");
    scanf("%d", &pos);

    if (head == NULL)
    {
        printf("List is empty\n");
        break;
    }

    if (pos == 1)
    {
        temp = head;
        head = head->next;
        printf("Deleted element: %d\n", temp->data);
        free(temp);
    }
    else
    {
        temp = head;
        struct node *delnode;
        while (i < pos - 1 && temp != NULL)
        {
            temp = temp->next;
            i++;
        }

        if (temp == NULL || temp->next == NULL)
        {
            printf("Invalid position\n");
        }
        else
        {
            delnode = temp->next;
            temp->next = delnode->next;
            printf("Deleted element: %d\n", delnode->data);
            free(delnode);
        }
    }
}
break;
case 7://count
 {
     int count=0;
     temp=head;
     while(temp!=NULL)
     {
         count++;
         temp=temp->next;
     }
      printf("Number of nodes is :%d\n", count);
     break;
 }

case 8://search
{
    int key,flag=0;
    printf("Enter the elementto be searched: \n");
    scanf("%d", &key);
    temp=head;
    while(temp!=NULL)
    {
        if(temp->data==key)
        {
            flag=1;
            printf("%d found\n", key);
            break;
            
        }
         temp = temp->next;
    }
   
    if(flag==0)
    {
        printf("%d not found in linked list\n", key);
    }
    break;
    
}

        case 9://Display
            temp = head;
            while (temp != NULL)
            {
                printf("%d ", temp->data);
                temp = temp->next;
            }
            break;
            
        case 10://EXIT
            choice = 0;
            break;
        default:
            printf("Wrong Choice");
        }
        printf("\nDo you want to continue[Press 1]");
        scanf("%d", &choice);
    } while (choice == 1);
}
